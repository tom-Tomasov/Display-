const uint8_t digits7x16[] PROGMEM = {7,16,'0',':',
0x06, 0x00, 0x00, 0xFE, 0x7F, 0x03, 0xC0, 0x01, 0x80, 0x03, 0xC0, 0xFE, 0x7F, 0xFC, 0x3F,  // Code for char 0 //0x07, 0xFC, 0x3F, 0xFE, 0x7F, 0x03, 0xC0, 0x01, 0x80, 0x03, 0xC0, 0xFE, 0x7F, 0xFC, 0x3F,  // Code for char 0
0x05, 0x08, 0x00, 0x0C, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
0x07, 0x02, 0xE0, 0x03, 0xF8, 0x01, 0x9E, 0x81, 0x87, 0xE3, 0x81, 0x7E, 0x80, 0x1C, 0x80,  // Code for char 2
0x07, 0x02, 0x40, 0x03, 0xC0, 0x81, 0x80, 0x81, 0x80, 0xC3, 0xC1, 0x7E, 0x7F, 0x3C, 0x3E,  // Code for char 3
0x07, 0xC0, 0x03, 0xF8, 0x03, 0x3F, 0x02, 0x07, 0x02, 0x00, 0x02, 0xFC, 0xFF, 0xFC, 0xFF,  // Code for char 4
0x07, 0x7F, 0x40, 0x7F, 0xC0, 0x41, 0x80, 0x41, 0x80, 0xC1, 0xC0, 0x81, 0x7F, 0x01, 0x3F,  // Code for char 5
0x07, 0xFC, 0x3F, 0xFE, 0x7F, 0x43, 0xC0, 0x41, 0x80, 0xC1, 0xC0, 0x83, 0x7F, 0x02, 0x3F,  // Code for char 6
0x07, 0x01, 0x00, 0x01, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0xE1, 0x07, 0xFF, 0x00, 0x1F, 0x00,  // Code for char 7
0x07, 0x3C, 0x3E, 0x7E, 0x7F, 0xC3, 0xC1, 0x81, 0x80, 0xC3, 0xC1, 0x7E, 0x7F, 0x3C, 0x3E,  // Code for char 8
0x07, 0x7C, 0x40, 0xFE, 0xC0, 0x83, 0x81, 0x01, 0x81, 0x03, 0xC1, 0xFE, 0x7F, 0xFC, 0x3F,  // Code for char 9
0x01, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char :
};

const uint8_t digits5x16rn[] PROGMEM = {5,16,'0',':',
0x05, 0xFE, 0x7F, 0x01, 0x80, 0x01, 0x80, 0xFF, 0xFF, 0xFE, 0x7F,
0x04, 0x04, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
0x05, 0x02, 0xFF, 0x81, 0x80, 0x81, 0x80, 0xFF, 0x80, 0x7E, 0x80, 
0x05, 0x02, 0x40, 0x81, 0x80, 0x81, 0x80, 0xFF, 0xFF, 0x7E, 0x7F, 
0x05, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x01, 0xFE, 0xFF, 0xFE, 0xFF,
0x05, 0xFF, 0x40, 0x81, 0x80, 0x81, 0x80, 0x81, 0xFF, 0x01, 0x7F,
0x05, 0xFE, 0x7F, 0x81, 0x80, 0x81, 0x80, 0x81, 0xFF, 0x02, 0x7F,
0x05, 0x01, 0x00, 0x01, 0xFC, 0xC1, 0xFF, 0xFF, 0x03, 0x3F, 0x00,
0x05, 0x7E, 0x7F, 0x81, 0x80, 0x81, 0x80, 0xFF, 0xFF, 0x7E, 0x7F,
0x05, 0x7E, 0x40, 0x81, 0x80, 0x81, 0x80, 0xFF, 0xFF, 0xFE, 0x7F,
0x01, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};

const uint8_t font3x7[] PROGMEM = {5,7,' ','_',
0x02, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char  
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char !
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char "
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char #
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char $
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char %
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char &
0x03, 0x00, 0x03, 0x03, 0x00, 0x00,      // Code for char '   pouzite jako Stupně C 0x03, 0x00, 0x03, 0x03, 0x00, 0x00, 
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char (
0x01, 0x55, 0x00, 0x00, 0x00, 0x00,      // Code for char )    // použito na "| s mezerama"  
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char *
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char +
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char ,
0x03, 0x08, 0x08, 0x08, 0x00, 0x00,      // Code for char -     //0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x40, 0x00, 0x00, 0x00, 0x00,      // Code for char .
0x01, 0xff, 0x00, 0x00, 0x00, 0x00,      // Code for char /      //  pouzito  "|"
0x03, 0x7F, 0x41, 0x7F, 0x00, 0x00,      // Code for char 0
0x03, 0x04, 0x02, 0x7F, 0x00, 0x00,      // Code for char 1
0x03, 0x79, 0x49, 0x4F, 0x00, 0x00,      // Code for char 2
0x03, 0x41, 0x49, 0x7F, 0x00, 0x00,      // Code for char 3
0x03, 0x1F, 0x10, 0x7C, 0x00, 0x00,      // Code for char 4
0x03, 0x4F, 0x49, 0x79, 0x00, 0x00,      // Code for char 5
0x03, 0x7F, 0x49, 0x79, 0x00, 0x00,      // Code for char 6
0x03, 0x01, 0x71, 0x0F, 0x00, 0x00,      // Code for char 7
0x03, 0x7F, 0x49, 0x7F, 0x00, 0x00,      // Code for char 8
0x03, 0x4F, 0x49, 0x7F, 0x00, 0x00,      // Code for char 9
0x01, 0x14, 0x00, 0x00, 0x00, 0x00,      // Code for char :   // puvodně 0x03, 0x00, 0x14, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char ;
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char <
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char =
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char >
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char ?
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char @
0x03, 0x78, 0x24, 0x78, 0x00, 0x00,      // Code for char A   //0x03, 0x78, 0x24, 0x78, 0x00, 0x00,      // Code for char A
0x03, 0x7C, 0x54, 0x28, 0x00, 0x00,      // Code for char B
0x03, 0x38, 0x44, 0x44, 0x00, 0x00,      // Code for char C
0x03, 0x7C, 0x44, 0x38, 0x00, 0x00,      // Code for char D
0x03, 0x7C, 0x54, 0x44, 0x00, 0x00,      // Code for char E
0x03, 0x7C, 0x14, 0x04, 0x00, 0x00,      // Code for char F
0x03, 0x38, 0x44, 0x74, 0x00, 0x00,      // Code for char G
0x03, 0x7C, 0x10, 0x7C, 0x00, 0x00,      // Code for char H
0x01, 0x7C, 0x00, 0x00, 0x00, 0x00,      // Code for char I
0x03, 0x44, 0x44, 0x3C, 0x00, 0x00,      // Code for char J
0x03, 0x7C, 0x10, 0x6C, 0x00, 0x00,      // Code for char K
0x03, 0x7C, 0x40, 0x40, 0x00, 0x00,      // Code for char L
0x05, 0x78, 0x04, 0x38, 0x04, 0x78,      // Code for char M
0x03, 0x7C, 0x04, 0x78, 0x00, 0x00,      // Code for char N
0x03, 0x38, 0x44, 0x38, 0x00, 0x00,      // Code for char O
0x03, 0x7C, 0x24, 0x18, 0x00, 0x00,      // Code for char P
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char Q
0x03, 0x7C, 0x24, 0x58, 0x00, 0x00,      // Code for char R
0x03, 0x48, 0x54, 0x24, 0x00, 0x00,      // Code for char S
0x03, 0x04, 0x7C, 0x04, 0x00, 0x00,      // Code for char T
0x03, 0x3C, 0x40, 0x7C, 0x00, 0x00,      // Code for char U
0x03, 0x3C, 0x40, 0x3C, 0x00, 0x00,      // Code for char V
0x05, 0x3C, 0x40, 0x38, 0x40, 0x3C,      // Code for char W
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char X
0x03, 0x1C, 0x70, 0x1C, 0x00, 0x00,      // Code for char Y
0x03, 0x64, 0x54, 0x4C, 0x00, 0x00,      //   zavinač //   //0x03, 0x64, 0x54, 0x4C, 0x00, 0x00,  //Code for char Z
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char [
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char BackSlash
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char ]
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char ^
//0x05, 0x20, 0x54, 0x54, 0x54, 0x78,//0x20, 0x54, 0x54, 0x54, 0x78, 0x00,       // a 
0x01, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char _
0x03, 0x3E, 0x41, 0x41, 0x00, 0x00,      // nejede Code for char c male (velke C pro stupně38)
};


const uint8_t digits3x5[] PROGMEM = { 3,5,'0',':',    //'9',
0x03, 0xF8, 0x88, 0xF8, 
// 0x02, 0x10, 0xF8, 0x00, // odkomentovano
0x03, 0x20, 0x10, 0xF8, 
0x03, 0xE8, 0xA8, 0xB8, 
0x03, 0x88, 0xA8, 0xF8, 
0x03, 0x38, 0x20, 0xF8, 
0x03, 0xB8, 0xA8, 0xE8, 
0x03, 0xF8, 0xA8, 0xE8, 
0x03, 0x08, 0x08, 0xF8, 
0x03, 0xF8, 0xA8, 0xF8, 
0x03, 0xB8, 0xA8, 0xF8,
0x01, 0x50, 0x00, 0x00,     //":"
};

const uint8_t digits5x8rn[] PROGMEM = { 5,8,' ',':',
0, 0,0,0,0,0, // space
5, B00011100, B00100010, B01000100, B00100010, B00011100, // !=  upraveno na srdce // ! 1, B01011111, B00000000, B00000000,0,0,
3, B00000011, B00000000, B00000011,0,0,
3, B00100100, B00100000, B00110100,0,0, //# up= upraveno na oči  a pusu v pravo nahoru //# up   // 3, B00000010, B01111111, B00000010,0,0, 
3, B00100100, B00100000, B00100100,0,0, // $= down //upraveno na oči a usmev - MINUS // $ down//3, B00100000, B01111111, B00100000,0,0,
3, B00110100, B00010000, B00010100,0,0, //%=  //upraveno na oči a  pusu v levo dolu  //  %  3, B01100001, B00011100, B01000011,0,0, 
0, 0,0,0,0,0, // &
1, B00000001, B00000000, B00000000,0,0, // '
2, B00111110, B01000001, 0,0,0, // (    // na 3 pozici B00000000,
2, B01000001, B00111110, 0,0,0, // )    // na 3 pozici B00000000,
// 5, 0x1B,0x1B,0x00,0x11,0x0E,0x00, //*

0, 0,0,0,0,0, // *
5, B00001000, B00001000, B00111110, B00001000, B00001000, // +
2, B10000000, B01000000, B00000000,0,0, // ,
5, B00001000, B00001000, B00001000, B00001000, B00001000, // -
1, B01000000, B00000000, B00000000,0,0, // .
3, B01100000, B00011100, B00000011,0,0, // /
0x04, 0x7E, 0x81, 0x81, 0x7E, 0x7E, // 0    //0x05, 0x7E, 0x81, 0x81, 0xFF, 0x7E
0x04, 0x04, 0x02, 0xFF, 0xFF, 0x00, // 1
0x04, 0xF1, 0x89, 0x89, 0x86, 0x86, // 2    //0x05, 0xF1, 0x89, 0x89, 0x8F, 0x86,
0x05, 0x81, 0x89, 0x89, 0xFF, 0x76, 
0x05, 0x1F, 0x10, 0x10, 0xFE, 0xFE, 
0x05, 0x8F, 0x89, 0x89, 0xF9, 0x71, 
0x05, 0x7E, 0x89, 0x89, 0xF9, 0x70, 
0x05, 0x01, 0xC1, 0xF1, 0x3F, 0x0F, 
0x05, 0x76, 0x89, 0x89, 0xFF, 0x76, 
0x05, 0x0E, 0x91, 0x91, 0xFF, 0x7E, //9
1, B00100100, B00000000, B00000000, B00000000, B00000000, // :
};


//------------vlada ----------polština------
const uint8_t dig3x8[] PROGMEM = { 4,
0x03, 0xFF, 0x81, 0xFF,
0x02, 0x02, 0xFF, 0x00,
0x03, 0xF9, 0x89, 0x8F,
0x03, 0x81, 0x89, 0xFF,
0x03, 0x1F, 0x10, 0xFC,
0x03, 0x8F, 0x89, 0xF9,
0x03, 0xFF, 0x89, 0xF9,
0x03, 0x01, 0xF1, 0x0F,
0x03, 0xFF, 0x89, 0xFF,
0x03, 0x9F, 0x91, 0xFF,
};

const uint8_t dig6x8[] PROGMEM = { 7,
0x06, 0x7E, 0xFF, 0x81, 0x81, 0xFF, 0x7E,
0x06, 0x00, 0x82, 0xFF, 0xFF, 0x80, 0x00,
0x06, 0xC2, 0xE3, 0xB1, 0x99, 0x8F, 0x86,
0x06, 0x42, 0xC3, 0x89, 0x89, 0xFF, 0x76,
0x06, 0x38, 0x3C, 0x26, 0x23, 0xFF, 0xFF,
0x06, 0x4F, 0xCF, 0x89, 0x89, 0xF9, 0x71,
0x06, 0x7E, 0xFF, 0x89, 0x89, 0xFB, 0x72,
0x06, 0x01, 0x01, 0xF1, 0xF9, 0x0F, 0x07,
0x06, 0x76, 0xFF, 0x89, 0x89, 0xFF, 0x76,
0x06, 0x4E, 0xDF, 0x91, 0x91, 0xFF, 0x7E,
6, 0,0,0,0,0,0
};

const uint8_t dig4x8[] PROGMEM = { 5,
0x04, 0xFF, 0x81, 0x81, 0xFF,
0x04, 0x04, 0x02, 0xFF, 0x00,
0x04, 0xF9, 0x89, 0x89, 0x8F,
0x04, 0x81, 0x89, 0x89, 0xFF,
0x04, 0x1F, 0x10, 0x10, 0xFE,
0x04, 0x8F, 0x89, 0x89, 0xF9,
0x04, 0xFF, 0x89, 0x89, 0xF8,
0x04, 0x01, 0xC1, 0x31, 0x0F,
0x04, 0xFF, 0x89, 0x89, 0xFF,
0x04, 0x1F, 0x91, 0x91, 0xFF,
};

const uint8_t dig3x7[] PROGMEM = { 4,
0x03, 0xFE, 0x82, 0xFE, 
0x03, 0x08, 0x04, 0xFE, 
0x03, 0xF2, 0x92, 0x9E, 
0x03, 0x82, 0x92, 0xFE, 
0x03, 0x3E, 0x20, 0xFC, 
0x03, 0x9E, 0x92, 0xF2, 
0x03, 0xFE, 0x92, 0xF2, 
0x03, 0x02, 0xE2, 0x1E, 
0x03, 0xFE, 0x92, 0xFE, 
0x03, 0x9E, 0x92, 0xFE, 
};

const uint8_t dig3x6[] PROGMEM = { 4,
0x03, 0xFC, 0x84, 0xFC, 
0x03, 0x10, 0x08, 0xFC, 
0x03, 0xF4, 0x94, 0x9C, 
0x03, 0x84, 0x94, 0xFC, 
0x03, 0x3C, 0x20, 0xF8, 
0x03, 0x9C, 0x94, 0xF4, 
0x03, 0xFC, 0x94, 0xF4, 
0x03, 0x04, 0xE4, 0x1C, 
0x03, 0xFC, 0x94, 0xFC, 
0x03, 0xBC, 0xA4, 0xFC, 
};

const uint8_t dig5x8rn[] PROGMEM = { 6,
0x05, 0x7E, 0x81, 0x81, 0xFF, 0x7E, 
0x05, 0x04, 0x02, 0xFF, 0xFF, 0x00, 
0x05, 0xF1, 0x89, 0x89, 0x8F, 0x86, 
0x05, 0x81, 0x89, 0x89, 0xFF, 0x76, 
0x05, 0x1F, 0x10, 0x10, 0xFE, 0xFE, 
0x05, 0x8F, 0x89, 0x89, 0xF9, 0x71, 
0x05, 0x7E, 0x89, 0x89, 0xF9, 0x70, 
0x05, 0x01, 0xC1, 0xF1, 0x3F, 0x0F, 
0x05, 0x76, 0x89, 0x89, 0xFF, 0x76, 
0x05, 0x0E, 0x91, 0x91, 0xFF, 0x7E, 
};

const uint8_t dig5x8sq[] PROGMEM = { 6,
0x05, 0xFF, 0x81, 0x81, 0xFF, 0xFF, 
0x04, 0x04, 0x02, 0xFF, 0xFF, 0x00, 
0x05, 0xF9, 0x89, 0x89, 0x8F, 0x8F, 
0x05, 0x81, 0x89, 0x89, 0xFF, 0xFF, 
0x05, 0x1F, 0x10, 0x10, 0xFE, 0xFE, 
0x05, 0x8F, 0x89, 0x89, 0xF9, 0xF9, 
0x05, 0xFF, 0x89, 0x89, 0xF9, 0xF9, 
0x05, 0x01, 0x01, 0x01, 0xFF, 0xFF, 
0x05, 0xFF, 0x89, 0x89, 0xFF, 0xFF, 
0x05, 0x9F, 0x91, 0x91, 0xFF, 0xFF, 
};

const uint8_t dweek_pl[] PROGMEM = { 11,
0x0A, 0xFC, 0x08, 0x10, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x94, 0x84, 
0x09, 0xFC, 0x24, 0x24, 0x3C, 0x00, 0xFC, 0x84, 0x84, 0xFC, 0x00,  
0x09, 0xFC, 0x80, 0xF0, 0x80, 0xFC, 0x00, 0x04, 0xFC, 0x04, 0x00, 
0x09, 0xDC, 0x94, 0x96, 0xF5, 0x00, 0xFC, 0x24, 0x64, 0xBC, 0x00,
0x09, 0xFC, 0x84, 0x84, 0xCC, 0x00, 0xC4, 0xA4, 0x94, 0x8C, 0x00,
0x0A, 0xFC, 0x24, 0x24, 0x3C, 0x00, 0xFC, 0x00, 0xFC, 0x24, 0xFC,  
0x09, 0xDC, 0x94, 0x94, 0xF4, 0x00, 0xFC, 0x84, 0x84, 0xFC, 0x00,  
0x09, 0x07, 0x05, 0x07, 0x00, 0xFF, 0xFF, 0x81, 0x81, 0x81, 0x00,  
};

const uint8_t dweek_en[] PROGMEM = { 11,
0x09, 0x9C, 0x94, 0x94, 0xF4, 0x00, 0xFC, 0x80, 0x80, 0xFC, 0x00,
0x0A, 0xFC, 0x04, 0x3C, 0x04, 0xFC, 0x00, 0xFC, 0x84, 0x84, 0xFC,
0x0A, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0xFC, 0x80, 0x80, 0xFC,
0x0A, 0xFC, 0x80, 0xF0, 0x80, 0xFC, 0x00, 0xFC, 0x94, 0x94, 0x84,
0x0A, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0xFC, 0x10, 0x10, 0xFC,
0x09, 0xFC, 0x24, 0x24, 0x04, 0x00, 0xFC, 0x24, 0x64, 0xBC, 0x00,
0x09, 0x9C, 0x94, 0x94, 0xF4, 0x00, 0xFC, 0x24, 0x24, 0xFC, 0x00,
0x09, 0x07, 0x05, 0x07, 0x00, 0xFF, 0xFF, 0x81, 0x81, 0x81, 0x00,
};



const uint8_t font[] PROGMEM = {6,
2, B00000000, B00000000, B00000000, B00000000, B00000000, // space
1, B01011111, B00000000, B00000000, B00000000, B00000000, // !
3, B00000011, B00000000, B00000011, B00000000, B00000000, // "
5, B00010100, B00111110, B00010100, B00111110, B00010100, // #
4, B00100100, B01101010, B00101011, B00010010, B00000000, // $
5, B01100011, B00010011, B00001000, B01100100, B01100011, // %
5, B00110110, B01001001, B01010110, B00100000, B01010000, // &
1, B00000011, B00000000, B00000000, B00000000, B00000000, // '
3, B00011100, B00100010, B01000001, B00000000, B00000000, // (
3, B01000001, B00100010, B00011100, B00000000, B00000000, // )
5, B00101000, B00011000, B00001110, B00011000, B00101000, // *
5, B00001000, B00001000, B00111110, B00001000, B00001000, // +
2, B10110000, B01110000, B00000000, B00000000, B00000000, // ,
4, B00001000, B00001000, B00001000, B00001000, B00000000, // -
1, B01000000, B00000000, B00000000, B00000000, B00000000, // .
3, B01100000, B00011100, B00000011, B00000000, B00000000, // /
4, B00111110, B01000001, B01000001, B00111110, B00000000, // 0
3, B01000010, B01111111, B01000000, B00000000, B00000000, // 1
4, B01100010, B01010001, B01001001, B01000110, B00000000, // 2
4, B00100010, B01000001, B01001001, B00110110, B00000000, // 3
4, B00011000, B00010100, B00010010, B01111111, B00000000, // 4
4, B00100111, B01000101, B01000101, B00111001, B00000000, // 5
4, B00111110, B01001001, B01001001, B00110010, B00000000, // 6
4, B01100001, B00010001, B00001001, B00000111, B00000000, // 7
4, B00110110, B01001001, B01001001, B00110110, B00000000, // 8
4, B00100110, B01001001, B01001001, B00111110, B00000000, // 9
1, B01000100, B00000000, B00000000, B00000000, B00000000, // :
2, B10000000, B01010000, B00000000, B00000000, B00000000, // ;
3, B00010000, B00101000, B01000100, B00000000, B00000000, // <
3, B00010100, B00010100, B00010100, B00000000, B00000000, // =
3, B01000100, B00101000, B00010000, B00000000, B00000000, // >
4, B00000010, B01011001, B00001001, B00000110, B00000000, // ?
5, B00111110, B01001001, B01010101, B01011101, B00001110, // @
4, B01111110, B00010001, B00010001, B01111110, B00000000, // A
4, B01111111, B01001001, B01001001, B00110110, B00000000, // B
4, B00111110, B01000001, B01000001, B00100010, B00000000, // C
4, B01111111, B01000001, B01000001, B00111110, B00000000, // D
4, B01111111, B01001001, B01001001, B01000001, B00000000, // E
4, B01111111, B00001001, B00001001, B00000001, B00000000, // F
4, B00111110, B01000001, B01001001, B01111010, B00000000, // G
4, B01111111, B00001000, B00001000, B01111111, B00000000, // H
3, B01000001, B01111111, B01000001, B00000000, B00000000, // I
4, B00110000, B01000000, B01000001, B00111111, B00000000, // J
4, B01111111, B00001000, B00010100, B01100011, B00000000, // K
4, B01111111, B01000000, B01000000, B01000000, B00000000, // L
5, B01111111, B00000010, B00001100, B00000010, B01111111, // M
5, B01111111, B00000100, B00001000, B00010000, B01111111, // N
4, B00111110, B01000001, B01000001, B00111110, B00000000, // O
4, B01111111, B00001001, B00001001, B00000110, B00000000, // P
4, B00111110, B01000001, B01000001, B10111110, B00000000, // Q
4, B01111111, B00001001, B00001001, B01110110, B00000000, // R
4, B00100110, B01001001, B01001001, B00110010, B00000000, // S
5, B00000001, B00000001, B01111111, B00000001, B00000001, // T
4, B00111111, B01000000, B01000000, B00111111, B00000000, // U
5, B00001111, B00110000, B01000000, B00110000, B00001111, // V
5, B00111111, B01000000, B00111000, B01000000, B00111111, // W
5, B01100011, B00010100, B00001000, B00010100, B01100011, // X
5, B00000111, B00001000, B01110000, B00001000, B00000111, // Y
4, B01100001, B01010001, B01001001, B01000111, B00000000, // Z
2, B01111111, B01000001, B00000000, B00000000, B00000000, // [
4, B00000001, B00000110, B00011000, B01100000, B00000000, // \ backslash
2, B01000001, B01111111, B00000000, B00000000, B00000000, // ]
3, B00000010, B00000001, B00000010, B00000000, B00000000, // hat
4, B01000000, B01000000, B01000000, B01000000, B00000000, // _
2, B00000001, B00000010, B00000000, B00000000, B00000000, // `
4, B00100000, B01010100, B01010100, B01111000, B00000000, // a
4, B01111111, B01000100, B01000100, B00111000, B00000000, // b
4, B00111000, B01000100, B01000100, B00101000, B00000000, // c
4, B00111000, B01000100, B01000100, B01111111, B00000000, // d
4, B00111000, B01010100, B01010100, B00011000, B00000000, // e
3, B00000100, B01111110, B00000101, B00000000, B00000000, // f
4, B10011000, B10100100, B10100100, B01111000, B00000000, // g
4, B01111111, B00000100, B00000100, B01111000, B00000000, // h
3, B01000100, B01111101, B01000000, B00000000, B00000000, // i
4, B01000000, B10000000, B10000100, B01111101, B00000000, // j
4, B01111111, B00010000, B00101000, B01000100, B00000000, // k
3, B01000001, B01111111, B01000000, B00000000, B00000000, // l
5, B01111100, B00000100, B01111100, B00000100, B01111000, // m
4, B01111100, B00000100, B00000100, B01111000, B00000000, // n
4, B00111000, B01000100, B01000100, B00111000, B00000000, // o
4, B11111100, B00100100, B00100100, B00011000, B00000000, // p
4, B00011000, B00100100, B00100100, B11111100, B00000000, // q
4, B01111100, B00001000, B00000100, B00000100, B00000000, // r
4, B01001000, B01010100, B01010100, B00100100, B00000000, // s
3, B00000100, B00111111, B01000100, B00000000, B00000000, // t
4, B00111100, B01000000, B01000000, B01111100, B00000000, // u
5, B00011100, B00100000, B01000000, B00100000, B00011100, // v
5, B00111100, B01000000, B00111100, B01000000, B00111100, // w
5, B01000100, B00101000, B00010000, B00101000, B01000100, // x
4, B10011100, B10100000, B10100000, B01111100, B00000000, // y
3, B01100100, B01010100, B01001100, B00000000, B00000000, // z
3, B00001000, B00110110, B01000001, B00000000, B00000000, // {
1, B01111111, B00000000, B00000000, B00000000, B00000000, // |
3, B01000001, B00110110, B00001000, B00000000, B00000000, // }
4, B00001000, B00000100, B00001000, B00000100, B00000000, // ~

5, B00100000, B01010100, B01010100, B11111000, B10000000, // a
4, B00111000, B01000100, B01000110, B00101001, B00000000, // c
4, B00111000, B01010100, B11010100, B10011000, B00000000, // e
3, B01010001, B01111111, B01000100, B00000000, B00000000, // l
4, B01111100, B00000100, B00000110, B01111001, B00000000, // n
4, B00111000, B01000100, B01000110, B00111001, B00000000, // o
4, B01001000, B01010100, B01010110, B00100101, B00000000, // s
3, B01100100, B01010110, B01001101, B00000000, B00000000, // z
3, B01100100, B01010101, B01001100, B00000000, B00000000, // z
5, B01111110, B00010001, B00010001, B11111110, B10000000, // A
4, B00111100, B01000010, B01000011, B00100101, B00000000, // C
5, B01111111, B01001001, B01001001, B11000001, B10000000, // E
4, B01111111, B01001000, B01000100, B01000000, B00000000, // L
5, B01111110, B00000100, B00001010, B00010001, B01111110, // N
4, B00111100, B01000110, B01000011, B00111100, B00000000, // O
4, B00100100, B01001010, B01001011, B00110000, B00000000, // S
4, B01100010, B01010110, B01001011, B01000110, B00000000, // Z
4, B01101001, B01011001, B01001101, B01001011, B00000000, // Z

5, B00111110, B01010101, B01100001, B01010101, B00111110, // :)
5, B00111110, B01100101, B01010001, B01100101, B00111110, // :(
5, B00111110, B01000101, B01010001, B01000101, B00111110, // :o
5, 0x06, 0x1F, 0x7E, 0x1F, 0x06,   // heart
5, 0x04, 0x02, 0x7F, 0x02, 0x04,   // arrow up
5, 0x10, 0x20, 0x7F, 0x20, 0x10,   // arrow down
3, B00000010, B00000101, B00000010, B00000000, B00000000, // deg
};


// ------slunce --------
//{0x91,0x52,0x3c,0x27,0xe4,0x3c,0x4a,0x89};


    //========== dodano vlada ================

// Sprite Definitions
const uint8_t F_PMAN1 = 6;
const uint8_t W_PMAN1 = 8;
static const uint8_t PROGMEM pacman1[F_PMAN1 * W_PMAN1] =  // gobbling pacman animation
{
  0x00, 0x81, 0xc3, 0xe7, 0xff, 0x7e, 0x7e, 0x3c,
  0x00, 0x42, 0xe7, 0xe7, 0xff, 0xff, 0x7e, 0x3c,
  0x24, 0x66, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c,
  0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c,
  0x24, 0x66, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c,
  0x00, 0x42, 0xe7, 0xe7, 0xff, 0xff, 0x7e, 0x3c,
};
 
const uint8_t F_PMAN2 = 6;
const uint8_t W_PMAN2 = 18;
static const uint8_t PROGMEM pacman2[F_PMAN2 * W_PMAN2] =  // ghost pursued by a pacman
{
  0x00, 0x81, 0xc3, 0xe7, 0xff, 0x7e, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x7b, 0xf3, 0x7f, 0xfb, 0x73, 0xfe,
  0x00, 0x42, 0xe7, 0xe7, 0xff, 0xff, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x7b, 0xf3, 0x7f, 0xfb, 0x73, 0xfe,
  0x24, 0x66, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x7b, 0xf3, 0x7f, 0xfb, 0x73, 0xfe,
  0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x73, 0xfb, 0x7f, 0xf3, 0x7b, 0xfe,
  0x24, 0x66, 0xe7, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x73, 0xfb, 0x7f, 0xf3, 0x7b, 0xfe,
  0x00, 0x42, 0xe7, 0xe7, 0xff, 0xff, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0xfe, 0x73, 0xfb, 0x7f, 0xf3, 0x7b, 0xfe,
};
/*
const uint8_t font[] PROGMEM = {6,
2, B00000000, B00000000, B00000000, B00000000, B00000000, // space
1, B01011111, B00000000, B00000000, B00000000, B00000000, // !
3, B00000011, B00000000, B00000011, B00000000, B00000000, // "
5, B00010100, B00111110, B00010100, B00111110, B00010100, // #
4, B00100100, B01101010, B00101011, B00010010, B00000000, // $
5, B01100011, B00010011, B00001000, B01100100, B01100011, // %
5, B00110110, B01001001, B01010110, B00100000, B01010000, // &
1, B00000011, B00000000, B00000000, B00000000, B00000000, // '
3, B00011100, B00100010, B01000001, B00000000, B00000000, // (
3, B01000001, B00100010, B00011100, B00000000, B00000000, // )
5, B00101000, B00011000, B00001110, B00011000, B00101000, // *
5, B00001000, B00001000, B00111110, B00001000, B00001000, // +
2, B10110000, B01110000, B00000000, B00000000, B00000000, // ,
4, B00001000, B00001000, B00001000, B00001000, B00000000, // -
1, B01000000, B00000000, B00000000, B00000000, B00000000, // .
3, B01100000, B00011100, B00000011, B00000000, B00000000, // /
4, B00111110, B01000001, B01000001, B00111110, B00000000, // 0
3, B01000010, B01111111, B01000000, B00000000, B00000000, // 1
4, B01100010, B01010001, B01001001, B01000110, B00000000, // 2
4, B00100010, B01000001, B01001001, B00110110, B00000000, // 3
4, B00011000, B00010100, B00010010, B01111111, B00000000, // 4
4, B00100111, B01000101, B01000101, B00111001, B00000000, // 5
4, B00111110, B01001001, B01001001, B00110010, B00000000, // 6
4, B01100001, B00010001, B00001001, B00000111, B00000000, // 7
4, B00110110, B01001001, B01001001, B00110110, B00000000, // 8
4, B00100110, B01001001, B01001001, B00111110, B00000000, // 9
1, B01000100, B00000000, B00000000, B00000000, B00000000, // :
2, B10000000, B01010000, B00000000, B00000000, B00000000, // ;
3, B00010000, B00101000, B01000100, B00000000, B00000000, // <
3, B00010100, B00010100, B00010100, B00000000, B00000000, // =
3, B01000100, B00101000, B00010000, B00000000, B00000000, // >
4, B00000010, B01011001, B00001001, B00000110, B00000000, // ?
5, B00111110, B01001001, B01010101, B01011101, B00001110, // @
4, B01111110, B00010001, B00010001, B01111110, B00000000, // A
4, B01111111, B01001001, B01001001, B00110110, B00000000, // B
4, B00111110, B01000001, B01000001, B00100010, B00000000, // C
4, B01111111, B01000001, B01000001, B00111110, B00000000, // D
4, B01111111, B01001001, B01001001, B01000001, B00000000, // E
4, B01111111, B00001001, B00001001, B00000001, B00000000, // F
4, B00111110, B01000001, B01001001, B01111010, B00000000, // G
4, B01111111, B00001000, B00001000, B01111111, B00000000, // H
3, B01000001, B01111111, B01000001, B00000000, B00000000, // I
4, B00110000, B01000000, B01000001, B00111111, B00000000, // J
4, B01111111, B00001000, B00010100, B01100011, B00000000, // K
4, B01111111, B01000000, B01000000, B01000000, B00000000, // L
5, B01111111, B00000010, B00001100, B00000010, B01111111, // M
5, B01111111, B00000100, B00001000, B00010000, B01111111, // N
4, B00111110, B01000001, B01000001, B00111110, B00000000, // O
4, B01111111, B00001001, B00001001, B00000110, B00000000, // P
4, B00111110, B01000001, B01000001, B10111110, B00000000, // Q
4, B01111111, B00001001, B00001001, B01110110, B00000000, // R
4, B00100110, B01001001, B01001001, B00110010, B00000000, // S
5, B00000001, B00000001, B01111111, B00000001, B00000001, // T
4, B00111111, B01000000, B01000000, B00111111, B00000000, // U
5, B00001111, B00110000, B01000000, B00110000, B00001111, // V
5, B00111111, B01000000, B00111000, B01000000, B00111111, // W
5, B01100011, B00010100, B00001000, B00010100, B01100011, // X
5, B00000111, B00001000, B01110000, B00001000, B00000111, // Y
4, B01100001, B01010001, B01001001, B01000111, B00000000, // Z      0x06, 0x1F, 0x7E, 0x1F, 0x06,   //4, B01100001, B01010001, B01001001, B01000111, B00000000,
2, B01111111, B01000001, B00000000, B00000000, B00000000, // [
4, B00000001, B00000110, B00011000, B01100000, B00000000, // \ backslash
2, B01000001, B01111111, B00000000, B00000000, B00000000, // ]
3, B00000010, B00000001, B00000010, B00000000, B00000000, // hat
4, B01000000, B01000000, B01000000, B01000000, B00000000, // _
2, B00000001, B00000010, B00000000, B00000000, B00000000, // `
4, 0x20, 0x54, 0x54, 0x78, 0x00, // a  orig B00100000, B01010100, B01010100, B01111000, B00000000,
4, B01111111, B01000100, B01000100, B00111000, B00000000, // b
4, B00111000, B01000100, B01000100, B00101000, B00000000, // c
4, B00111000, B01000100, B01000100, B01111111, B00000000, // d
4, B00111000, B01010100, B01010100, B00011000, B00000000, // e
3, B00000100, B01111110, B00000101, B00000000, B00000000, // f
4, B10011000, B10100100, B10100100, B01111000, B00000000, // g
4, B01111111, B00000100, B00000100, B01111000, B00000000, // h
3, B01000100, B01111101, B01000000, B00000000, B00000000, // i
4, B01000000, B10000000, B10000100, B01111101, B00000000, // j
4, B01111111, B00010000, B00101000, B01000100, B00000000, // k
3, B01000001, B01111111, B01000000, B00000000, B00000000, // l
5, B01111100, B00000100, B01111100, B00000100, B01111000, // m
4, B01111100, B00000100, B00000100, B01111000, B00000000, // n
4, B00111000, B01000100, B01000100, B00111000, B00000000, // o
4, B11111100, B00100100, B00100100, B00011000, B00000000, // p
4, B00011000, B00100100, B00100100, B11111100, B00000000, // q
4, B01111100, B00001000, B00000100, B00000100, B00000000, // r
4, B01001000, B01010100, B01010100, B00100100, B00000000, // s
3, B00000100, B00111111, B01000100, B00000000, B00000000, // t
4, B00111100, B01000000, B01000000, B01111100, B00000000, // u
5, B00011100, B00100000, B01000000, B00100000, B00011100, // v
5, B00111100, B01000000, B00111100, B01000000, B00111100, // w
5, B01000100, B00101000, B00010000, B00101000, B01000100, // x
4, B10011100, B10100000, B10100000, B01111100, B00000000, // y
3, B01100100, B01010100, B01001100, B00000000, B00000000, // z
3, B00001000, B00110110, B01000001, B00000000, B00000000, // {
1, B01111111, B00000000, B00000000, B00000000, B00000000, // |
3, B01000001, B00110110, B00001000, B00000000, B00000000, // }
4, B00001000, B00000100, B00001000, B00000100, B00000000, // ~

5, B00100000, B01010100, B01010100, B11111000, B10000000, // a
4, B00111000, B01000100, B01000110, B00101001, B00000000, // c
4, B00111000, B01010100, B11010100, B10011000, B00000000, // e
3, B01010001, B01111111, B01000100, B00000000, B00000000, // l
4, B01111100, B00000100, B00000110, B01111001, B00000000, // n
4, B00111000, B01000100, B01000110, B00111001, B00000000, // o
4, B01001000, B01010100, B01010110, B00100101, B00000000, // s
3, B01100100, B01010110, B01001101, B00000000, B00000000, // z
3, B01100100, B01010101, B01001100, B00000000, B00000000, // z
5, B01111110, B00010001, B00010001, B11111110, B10000000, // A
4, B00111100, B01000010, B01000011, B00100101, B00000000, // C
5, B01111111, B01001001, B01001001, B11000001, B10000000, // E
4, B01111111, B01001000, B01000100, B01000000, B00000000, // L
5, B01111110, B00000100, B00001010, B00010001, B01111110, // N
4, B00111100, B01000110, B01000011, B00111100, B00000000, // O
4, B00100100, B01001010, B01001011, B00110000, B00000000, // S
4, B01100010, B01010110, B01001011, B01000110, B00000000, // Z
4, B01101001, B01011001, B01001101, B01001011, B00000000, // Z

5, B00111110, B01010101, B01100001, B01010101, B00111110, // :)
5, B00111110, B01100101, B01010001, B01100101, B00111110, // :(
5, B00111110, B01000101, B01010001, B01000101, B00111110, // :o
5, 0x06, 0x1F, 0x7E, 0x1F, 0x06,   // heart
5, 0x04, 0x02, 0x7F, 0x02, 0x04,   // arrow up
5, 0x10, 0x20, 0x7F, 0x20, 0x10,   // arrow down
3, B00000010, B00000101, B00000010, B00000000, B00000000, // deg
};
*/

// 0x7E,0x81,0xA1,0x85,0x81,0xBD,0x81,0x7E,

//     vlada dodano
//-----------------font nove----------
//    MD_MAX72XX::fontType_t myFont[] PROGMEM = 
const uint8_t myFont[] PROGMEM =     
{
	'F', 2, 0, 0, 0, 255, 8,
	0, 	// 1 - 'Empty Cell'
	5, 62, 91, 79, 91, 62, 	// 2 - 'Sad Smiley'
	5, 62, 107, 79, 107, 62, 	// 3 - 'Happy Smiley'
	5, 28, 62, 124, 62, 28, 	// 4 - 'Heart'
	5, 24, 60, 126, 60, 24, 	// 5 - 'Diamond'
	5, 28, 87, 125, 87, 28, 	// 6 - 'Clubs'
	5, 28, 94, 127, 94, 28, 	// 7 - 'Spades'
	4, 0, 24, 60, 24, 	// 8 - 'Bullet Point'
	5, 255, 231, 195, 231, 255, 	// 9 - 'Rev Bullet Point'
	4, 0, 24, 36, 24, 	// 10 - 'Hollow Bullet Point'
	5, 255, 231, 219, 231, 255, 	// 11 - 'Rev Hollow BP'
	5, 48, 72, 58, 6, 14, 	// 12 - 'Male'
	5, 38, 41, 121, 41, 38, 	// 13 - 'Female'
	5, 64, 127, 5, 5, 7, 	// 14 - 'Music Note 1'
	5, 64, 127, 5, 37, 63, 	// 15 - 'Music Note 2'
	5, 90, 60, 231, 60, 90, 	// 16 - 'Snowflake'
	5, 127, 62, 28, 28, 8, 	// 17 - 'Right Pointer'
	5, 8, 28, 28, 62, 127, 	// 18 - 'Left Pointer'
	5, 20, 34, 127, 34, 20, 	// 19 - 'UpDown Arrows'
	5, 255, 255, 255, 255, 255, 	// 20 - 'Full Block'
	5, 240, 240, 240, 240, 240, 	// 21 - 'Half Block Bottom'
	3, 255, 255, 255, 	// 22 - 'Half Block LHS'
	5, 0, 0, 0, 255, 255, 	// 23 - 'Half Block RHS'
	5, 15, 15, 15, 15, 15, 	// 24 - 'Half Block Top'
	5, 8, 4, 126, 4, 8, 	// 25 - 'Up Arrow'
	5, 16, 32, 126, 32, 16, 	// 26 - 'Down Arrow'
	5, 8, 8, 42, 28, 8, 	// 27 - 'Right Arrow'
	5, 8, 28, 42, 8, 8, 	// 28 - 'Left Arrow'
	5, 170, 0, 85, 0, 170, 	// 29 - '30% shading'
	5, 170, 85, 170, 85, 170, 	// 30 - '50% shading'
	5, 48, 56, 62, 56, 48, 	// 31 - 'Up Pointer'
	5, 6, 14, 62, 14, 6, 	// 32 - 'Down Pointer'
	2, 0, 0, 	// 33  - 'Space'
	1, 95, 	// 34 - '!'
	3, 7, 0, 7, 	// 35 - '""'
	5, 20, 127, 20, 127, 20, 	// 36 - '#'
	5, 68, 74, 255, 74, 50, 	// 37 - '$'
	5, 99, 19, 8, 100, 99, 	// 38 - '%'
	5, 54, 73, 73, 54, 72, 	// 39 - '&'
	1, 7, 	// 40 - '''
	3, 62, 65, 65, 	// 41 - '('
	3, 65, 65, 62, 	// 42 - ')'
	5, 8, 42, 28, 42, 8, 	// 43 - '*'
	5, 8, 8, 62, 8, 8, 	// 44 - '+'
	3, 96, 224, 0, 	// 45'
	4, 8, 8, 8, 8, 	// 46 - '-'
	2, 96, 96, 	// 47 - '.'
	5, 96, 16, 8, 4, 3, 	// 48 - '/'
	5, 62, 127, 73, 69, 62, 	// 49 - '0'
	4, 4, 2, 127, 127, 	// 50 - '1'
	5, 113, 121, 73, 79, 70, 	// 51 - '2'
	5, 65, 73, 73, 127, 54, 	// 52 - '3'
	5, 15, 15, 8, 120, 127, 	// 53 - '4'
	5, 79, 79, 73, 121, 49, 	// 54 - '5'
	5, 62, 127, 73, 73, 48, 	// 55 - '6'
	5, 3, 3, 113, 121, 7, 	// 56 - '7'
	5, 54, 127, 73, 73, 54, 	// 57 - '8'
	5, 6, 73, 73, 127, 62, 	// 58 - '9'
	2, 108, 108, 	// 59 - ':'
	2, 108, 236, 	// 60 - ';'
	3, 8, 20, 34, 	// 61 - '<'
	4, 20, 20, 20, 20, 	// 62 - '='
	3, 34, 20, 8, 	// 63 - '>'
	5, 1, 89, 9, 9, 6, 	// 64 - '?'
	5, 62, 65, 93, 89, 78, 	// 65 - '@'
	5, 126, 127, 9, 9, 126, 	// 66 - 'A'
	5, 127, 127, 73, 73, 54, 	// 67 - 'B'
	5, 62, 127, 65, 65, 65, 	// 68 - 'C'
	5, 127, 127, 65, 65, 62, 	// 69 - 'D'
	5, 127, 127, 73, 73, 65, 	// 70 - 'E'
	5, 127, 127, 9, 9, 1, 	// 71 - 'F'
	5, 62, 127, 65, 73, 121, 	// 72 - 'G'
	5, 127, 127, 8, 8, 127, 	// 73 - 'H'
	4, 65, 127, 127, 65, 	// 74 - 'I'
	5, 48, 65, 65, 127, 63, 	// 75 - 'J'
	5, 127, 127, 20, 34, 65, 	// 76 - 'K'
	5, 127, 127, 64, 64, 64, 	// 77 - 'L'
	6, 127, 126, 4, 28, 6, 127, 	// 78 - 'M'
	5, 127, 127, 4, 8, 127, 	// 79 - 'N'
	5, 62, 127, 65, 65, 62, 	// 80 - 'O'
	5, 127, 127, 9, 9, 6, 	// 81 - 'P'
	5, 62, 127, 65, 97, 126, 	// 82 - 'Q'
	5, 127, 127, 25, 41, 70, 	// 83 - 'R'
	5, 70, 79, 73, 121, 49, 	// 84 - 'S'
	6, 1, 1, 127, 127, 1, 1, 	// 85 - 'T'
	5, 63, 127, 64, 64, 63, 	// 86 - 'U'
	5, 31, 63, 64, 32, 31, 	// 87 - 'V'
	6, 63, 127, 64, 48, 64, 63, 	// 88 - 'W'
	5, 99, 119, 8, 20, 99, 	// 89 - 'X'
	6, 3, 7, 124, 120, 4, 3, 	// 90 - 'Y'
	5, 97, 113, 89, 77, 71, 	// 91 - 'Z'
	3, 127, 65, 65, 	// 92 - '['
	5, 3, 4, 8, 16, 96, 	// 93 - '\'
	3, 65, 65, 127, 	// 94 - ']'
	5, 4, 2, 1, 2, 4, 	// 95 - '^'
	4, 128, 128, 128, 128, 	// 96 - '_'
	3, 1, 2, 4, 	// 97 - '`'
	4, 56, 68, 68, 124, 	// 98 - 'a'
	4, 127, 68, 68, 56, 	// 99 - 'b'
	4, 56, 68, 68, 68, 	// 100 - 'c'
	4, 56, 68, 68, 127, 	// 101 - 'd'
	4, 56, 84, 84, 88, 	// 102 - 'e'
	4, 4, 126, 5, 1, 	// 103 - 'f'
	4, 24, 164, 164, 124, 	// 104 - 'g'
	4, 127, 4, 4, 120, 	// 105 - 'h'
	1, 125, 	// 106 - 'i'
	3, 132, 133, 124, 	// 107 - 'j'
	4, 127, 16, 40, 68, 	// 108 - 'k'
	1, 127, 	// 109 - 'l'
	5, 124, 4, 120, 4, 120, 	// 110 - 'm'
	4, 124, 4, 4, 120, 	// 111 - 'n'
	4, 56, 68, 68, 56, 	// 112 - 'o'
	4, 252, 36, 36, 24, 	// 113 - 'p'
	4, 24, 36, 36, 252, 	// 114 - 'q'
	4, 124, 4, 4, 8, 	// 115 - 'r'
	4, 88, 84, 84, 52, 	// 116 - 's'
	3, 4, 127, 4, 	// 117 - 't'
	4, 60, 64, 64, 124, 	// 118 - 'u'
	4, 28, 32, 64, 124, 	// 119 - 'v'
	5, 60, 64, 48, 64, 60, 	// 120 - 'w'
	4, 108, 16, 16, 108, 	// 121 - 'x'
	4, 28, 160, 160, 124, 	// 122 - 'y'
	4, 100, 84, 84, 76, 	// 123 - 'z'
	4, 8, 54, 65, 65, 	// 124 - '{'
	1, 127, 	// 125 - '|'
	4, 65, 65, 54, 8, 	// 126 - '}'
	4, 2, 1, 2, 1, 	// 127 - '~'
	5, 127, 65, 65, 65, 127, 	// 128 - 'Hollow Block'
	5, 62, 85, 85, 85, 65, 	// 129 - 'Euro symbol'
	5, 56, 68, 68, 56, 68, 	// 130 - 'Alpha'
	5, 124, 42, 42, 62, 20, 	// 131 - 'Beta'
	5, 126, 2, 2, 6, 6, 	// 132 - 'Gamma'
	5, 2, 126, 2, 126, 2, 	// 133 - 'Pi'
	5, 99, 85, 73, 65, 99, 	// 134 - 'Sigma'
	5, 56, 68, 68, 60, 4, 	// 135 - 'Theta'
	5, 64, 126, 32, 30, 32, 	// 136 - 'mu'
	5, 6, 2, 126, 2, 2, 	// 137 - 'Tau'
	8, 99, 19, 8, 100, 99, 0, 96, 96, 	// 138 - 'Percent 00'
	5, 42, 42, 42, 42, 42, 	// 139 - '3 Bar Equals'
	3, 81, 74, 68, 	// 140 - '>='
	3, 68, 74, 81, 	// 141 - '<='
	5, 0, 0, 255, 1, 3, 	// 142 - 'Top of Integral'
	3, 224, 128, 255, 	// 143 - 'Bot of Integral'
	5, 54, 18, 54, 36, 54, 	// 144 - 'Wavy ='
	3, 2, 5, 2, 	// 145 - 'Degree'
	2, 24, 24, 	// 146 - 'Math Product'
	2, 16, 16, 	// 147 - 'Short Dash'
	5, 48, 64, 255, 1, 1, 	// 148 - 'Square Root'
	4, 31, 1, 1, 30, 	// 149 - 'Superscript n'
	0, 	// 150
	0, 	// 151  
	0, 	// 152  
	0, 	// 153
	9, 1, 1, 127, 1, 127, 2, 12, 2, 127, 	// 154 - 'Trademark'
	0, 	// 155
	0, 	// 156
	0, 	// 157
	0, 	// 158
	0, 	// 159
	0, 	// 160
	1, 0, 	// 161 - ' Non-breaking space'
	1, 125, 	// 162 - '¡ Inverted Exclamation Mark'
	4, 24, 36, 126, 36, 	// 163 - '¢ Cent sign'
	4, 68, 126, 69, 65, 	// 164 - '£ Pound sign'
	5, 34, 28, 20, 28, 34, 	// 165 - '¤ Currency sign'
	5, 1, 42, 124, 42, 1, 	// 166 - '¥ Yen sign'
	1, 119, 	// 167 - '¦ Broken bar'
	4, 78, 85, 85, 57, 	// 168 - '§ Section sign'
	3, 2, 0, 2, 	// 169 - '¨ Diaeresis (Umlaut)'
	7, 126, 129, 189, 165, 165, 129, 126, 	// 170 - '© Copyright sign'
	3, 38, 41, 47, 	// 171 - 'ª Feminine Ordinal Indicator'
	5, 8, 20, 42, 20, 34, 	// 172 - '« Left-pointing double angle quotation mark'
	4, 8, 8, 8, 24, 	// 173 - '¬ Not sign'
	3, 8, 8, 8, 	// 174 - ' Soft hyphen'
	7, 126, 129, 189, 149, 169, 129, 126, 	// 175 - '® Registered sign'
	5, 1, 1, 1, 1, 1, 	// 176 - '¯ macron'
	3, 2, 5, 2, 	// 177 - '° Degree symbol'
	3, 36, 46, 36, 	// 178 - '± Plus-minus sign'
	3, 25, 21, 18, 	// 179 - '² Superscript two'
	3, 21, 21, 10, 	// 180 - '³ Superscript three'
	2, 2, 1, 	// 181 - '´ Acute accent'
	4, 248, 32, 64, 120, 	// 182 - 'µ Micro sign'
	5, 6, 9, 127, 1, 127, 	// 183 - 'Pilcrow sign'
	2, 24, 24, 	// 184 - '· Middle dot'
	4, 0, 128, 160, 192, 	// 185 - '¸ Cedilla'
	3, 18, 31, 16, 	// 186 - '¹ Superscript one'
	3, 38, 41, 38, 	// 187 - 'º Masculine ordinal indicator'
	5, 34, 20, 42, 20, 8, 	// 188 - '» Right-pointing double angle quotation mark'
	8, 64, 47, 16, 8, 4, 30, 17, 124, 	// 189 - '¼ Vulgar fraction one quarter'
	8, 64, 47, 16, 8, 4, 98, 85, 76, 	// 190 - '½ Vulgar fraction one half'
	9, 21, 85, 63, 16, 8, 4, 30, 17, 124, 	// 191 - '¾ Vulgar fraction three quarters'
	5, 48, 72, 72, 77, 64, 	// 192 - '¿ Inverted Question Mark'
	5, 120, 21, 22, 20, 120, 	// 193 - 'À Latin Capital Letter A with grave'
	5, 120, 20, 22, 21, 120, 	// 194 - 'Á Latin Capital letter A with acute'
	5, 122, 21, 20, 21, 122, 	// 195 - 'Â Latin Capital letter A with circumflex'
	5, 120, 22, 21, 22, 121, 	// 196 - 'Ã Latin Capital letter A with tilde'
	5, 120, 21, 20, 21, 120, 	// 197 - 'Ä Latin Capital letter A with diaeresis'
	5, 120, 20, 21, 20, 120, 	// 198 - 'Å Latin Capital letter A with ring above'
	7, 126, 9, 9, 127, 73, 73, 65, 	// 199 - 'Æ Latin Capital letter Æ'
	5, 158, 161, 97, 33, 33, 	// 200 - 'Ç Latin Capital letter C with cedilla'
	5, 124, 84, 85, 70, 68, 	// 201 - 'È Latin Capital letter E with grave'
	5, 124, 84, 86, 69, 68, 	// 202 - 'É Latin Capital letter E with acute'
	5, 126, 85, 84, 69, 70, 	// 203 - 'Ê Latin Capital letter E with circumflex'
	5, 124, 85, 84, 69, 68, 	// 204 - 'Ë Latin Capital letter E with diaeresis'
	3, 69, 126, 68, 	// 205 - 'Ì Latin Capital letter I with grave'
	3, 68, 126, 69, 	// 206 - 'Í Latin Capital letter I with acute'
	3, 70, 125, 70, 	// 207 - 'Î Latin Capital letter I with circumflex'
	3, 69, 124, 69, 	// 208 - 'Ï Latin Capital letter I with diaeresis'
	5, 8, 127, 73, 65, 62, 	// 209 - 'Ð Latin Capital letter Eth'
	5, 124, 10, 17, 34, 125, 	// 210 - 'Ñ Latin Capital letter N with tilde'
	5, 56, 68, 69, 70, 56, 	// 211 - 'Ò Latin Capital letter O with grave'
	5, 56, 68, 70, 69, 56, 	// 212 - 'Ó Latin Capital letter O with acute'
	5, 58, 69, 68, 69, 58, 	// 213 - 'Ô Latin Capital letter O with circumflex'
	5, 56, 70, 69, 70, 57, 	// 214 - 'Õ Latin Capital letter O with tilde'
	5, 56, 69, 68, 69, 56, 	// 215 - 'Ö Latin Capital letter O with diaeresis'
	5, 34, 20, 8, 20, 34, 	// 216 - '× Multiplication sign'
	5, 124, 98, 90, 70, 62, 	// 217 - 'Ø Latin Capital letter O with stroke'
	5, 60, 64, 65, 66, 60, 	// 218 - 'Ù Latin Capital letter U with grave'
	5, 60, 64, 66, 65, 60, 	// 219 - 'Ú Latin Capital letter U with acute'
	5, 60, 66, 65, 66, 60, 	// 220 - 'Û Latin Capital Letter U with circumflex'
	5, 60, 65, 64, 65, 60, 	// 221 - 'Ü Latin Capital Letter U with diaeresis'
	5, 2, 4, 122, 5, 2, 	// 222 - 'Ý Latin Capital Letter Y with acute'
	4, 63, 18, 18, 12, 	// 223 - 'Þ Latin Capital Letter Thorn'
	5, 126, 73, 73, 78, 48, 	// 224 - 'ß Latin Small Letter sharp S'
	4, 56, 69, 70, 124, 	// 225 - 'à Latin Small Letter A with grave'
	4, 56, 68, 70, 125, 	// 226 - 'á Latin Small Letter A with acute'
	4, 56, 70, 69, 126, 	// 227 - 'â Latin Small Letter A with circumflex'
	4, 58, 69, 70, 125, 	// 228 - 'ã Latin Small Letter A with tilde'
	4, 56, 69, 68, 125, 	// 229 - 'ä Latin Small Letter A with diaeresis'
	4, 48, 74, 77, 122, 	// 230 - 'å Latin Small Letter A with ring above'
	7, 32, 84, 84, 56, 84, 84, 88, 	// 231 - 'æ Latin Small Letter Æ'
	4, 156, 162, 98, 34, 	// 232 - 'ç Latin Small Letter C with cedilla'
	4, 56, 85, 86, 88, 	// 233 - 'è Latin Small Letter E with grave'
	4, 56, 84, 86, 89, 	// 234 - 'é Latin Small Letter E with acute'
	4, 56, 86, 85, 90, 	// 235 - 'ê Latin Small Letter E with circumflex'
	4, 56, 85, 84, 89, 	// 236 - 'ë Latin Small Letter E with diaeresis'
	2, 1, 122, 	// 237 - 'ì Latin Small Letter I with grave'
	2, 122, 1, 	// 238 - 'í Latin Small Letter I with acute'
	3, 2, 121, 2, 	// 239 - 'î Latin Small Letter I with circumflex'
	3, 2, 120, 2, 	// 240 - 'ï Latin Small Letter I with diaeresis'
	4, 48, 75, 75, 60, 	// 241 - 'ð Latin Small Letter Eth'
	4, 122, 9, 10, 113, 	// 242 - 'ñ Latin Small Letter N with tilde'
	4, 48, 73, 74, 48, 	// 243 - 'ò Latin Small Letter O with grave'
	4, 48, 72, 74, 49, 	// 244 - 'ó Latin Small Letter O with acute'
	4, 48, 74, 73, 50, 	// 245 - 'ô Latin Small Letter O with circumflex'
	4, 50, 73, 74, 49, 	// 246 - 'õ Latin Small Letter O with tilde'
	4, 57, 68, 68, 57, 	// 247 - 'ö Latin Small Letter O with diaeresis'
	5, 8, 8, 42, 8, 8, 	// 248 - '÷ Division sign'
	4, 56, 84, 76, 56, 	// 249 - 'ø Latin Small Letter O with stroke'
	4, 56, 65, 66, 120, 	// 250 - 'ù Latin Small Letter U with grave'
	4, 56, 64, 66, 121, 	// 251 - 'ú Latin Small Letter U with acute'
	4, 56, 66, 65, 122, 	// 252 - 'û Latin Small Letter U with circumflex'
	4, 58, 64, 64, 122, 	// 253 - 'ü Latin Small Letter U with diaeresis'
	4, 24, 160, 162, 121, 	// 254 - 'ý Latin Small Letter Y with acute'
	4, 252, 40, 40, 16 	// 255 - 'þ Latin Small Letter Thorn'
};

/*
//==================================================
// dodane vlada
const uint8_t font8x8_basic[128][8] = {
  //    char font8x8_basic[128][8] = {
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (nul)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0001
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0003
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0004
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0005
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0006
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0008
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0009
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000E
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000F
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0010
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0011
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0012
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0013
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0014
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0015
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0016
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0017
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0018
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0019
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001A
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001B
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001C
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001D
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001E
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001F
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0020 (space)
    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (;)
    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
    { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
    { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
    { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
    { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
    { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
    { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
    { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
    { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
    { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
    { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
    { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
    { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
    { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
    { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
    { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
    { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
    { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
    { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
    { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
    { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
    { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
    { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
    { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F
};




//--------------------------------------

const uint8_t dig6x8[] PROGMEM = { 7,
0x06, 0x7E, 0xFF, 0x81, 0x81, 0xFF, 0x7E,
0x06, 0x00, 0x82, 0xFF, 0xFF, 0x80, 0x00,
0x06, 0xC2, 0xE3, 0xB1, 0x99, 0x8F, 0x86,
0x06, 0x42, 0xC3, 0x89, 0x89, 0xFF, 0x76,
0x06, 0x38, 0x3C, 0x26, 0x23, 0xFF, 0xFF,
0x06, 0x4F, 0xCF, 0x89, 0x89, 0xF9, 0x71,
0x06, 0x7E, 0xFF, 0x89, 0x89, 0xFB, 0x72,
0x06, 0x01, 0x01, 0xF1, 0xF9, 0x0F, 0x07,
0x06, 0x76, 0xFF, 0x89, 0x89, 0xFF, 0x76,
0x06, 0x4E, 0xDF, 0x91, 0x91, 0xFF, 0x7E,
6, 0,0,0,0,0,0
};

// Standard ASCII 5x7 font
static const unsigned char font5x7[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,// (space)
  0x00, 0x00, 0x5F, 0x00, 0x00,// !
  0x00, 0x07, 0x00, 0x07, 0x00,// "
  0x14, 0x7F, 0x14, 0x7F, 0x14,// #
  0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
  0x23, 0x13, 0x08, 0x64, 0x62,// %
  0x36, 0x49, 0x55, 0x22, 0x50,// &
  0x00, 0x05, 0x03, 0x00, 0x00,// '
  0x00, 0x1C, 0x22, 0x41, 0x00,// (
  0x00, 0x41, 0x22, 0x1C, 0x00,// )
  0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
  0x08, 0x08, 0x3E, 0x08, 0x08,// +
  0x00, 0x50, 0x30, 0x00, 0x00,// ,
  0x08, 0x08, 0x08, 0x08, 0x08,// -
  0x00, 0x60, 0x60, 0x00, 0x00,// .
  0x20, 0x10, 0x08, 0x04, 0x02,// /
  0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
  0x00, 0x42, 0x7F, 0x40, 0x00,// 1
  0x42, 0x61, 0x51, 0x49, 0x46,// 2
  0x21, 0x41, 0x45, 0x4B, 0x31,// 3
  0x18, 0x14, 0x12, 0x7F, 0x10,// 4
  0x27, 0x45, 0x45, 0x45, 0x39,// 5
  0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
  0x01, 0x71, 0x09, 0x05, 0x03,// 7
  0x36, 0x49, 0x49, 0x49, 0x36,// 8
  0x06, 0x49, 0x49, 0x29, 0x1E,// 9
  0x00, 0x36, 0x36, 0x00, 0x00,// :
  0x00, 0x56, 0x36, 0x00, 0x00,// ;
  0x00, 0x08, 0x14, 0x22, 0x41,// <
  0x14, 0x14, 0x14, 0x14, 0x14,// =
  0x41, 0x22, 0x14, 0x08, 0x00,// >
  0x02, 0x01, 0x51, 0x09, 0x06,// ?
  0x32, 0x49, 0x79, 0x41, 0x3E,// @
  0x7E, 0x11, 0x11, 0x11, 0x7E,// A
  0x7F, 0x49, 0x49, 0x49, 0x36,// B
  0x3E, 0x41, 0x41, 0x41, 0x22,// C
  0x7F, 0x41, 0x41, 0x22, 0x1C,// D
  0x7F, 0x49, 0x49, 0x49, 0x41,// E
  0x7F, 0x09, 0x09, 0x01, 0x01,// F
  0x3E, 0x41, 0x41, 0x51, 0x32,// G
  0x7F, 0x08, 0x08, 0x08, 0x7F,// H
  0x00, 0x41, 0x7F, 0x41, 0x00,// I
  0x20, 0x40, 0x41, 0x3F, 0x01,// J
  0x7F, 0x08, 0x14, 0x22, 0x41,// K
  0x7F, 0x40, 0x40, 0x40, 0x40,// L
  0x7F, 0x02, 0x04, 0x02, 0x7F,// M
  0x7F, 0x04, 0x08, 0x10, 0x7F,// N
  0x3E, 0x41, 0x41, 0x41, 0x3E,// O
  0x7F, 0x09, 0x09, 0x09, 0x06,// P
  0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
  0x7F, 0x09, 0x19, 0x29, 0x46,// R
  0x46, 0x49, 0x49, 0x49, 0x31,// S
  0x01, 0x01, 0x7F, 0x01, 0x01,// T
  0x3F, 0x40, 0x40, 0x40, 0x3F,// U
  0x1F, 0x20, 0x40, 0x20, 0x1F,// V
  0x7F, 0x20, 0x18, 0x20, 0x7F,// W
  0x63, 0x14, 0x08, 0x14, 0x63,// X
  0x03, 0x04, 0x78, 0x04, 0x03,// Y
  0x61, 0x51, 0x49, 0x45, 0x43,// Z
  0x00, 0x00, 0x7F, 0x41, 0x41,// [
  0x02, 0x04, 0x08, 0x10, 0x20,// "\"
  0x41, 0x41, 0x7F, 0x00, 0x00,// ]
  0x04, 0x02, 0x01, 0x02, 0x04,// ^
  0x40, 0x40, 0x40, 0x40, 0x40,// _
  0x00, 0x01, 0x02, 0x04, 0x00,// `
  0x20, 0x54, 0x54, 0x54, 0x78,// a
  0x7F, 0x48, 0x44, 0x44, 0x38,// b
  0x38, 0x44, 0x44, 0x44, 0x20,// c
  0x38, 0x44, 0x44, 0x48, 0x7F,// d
  0x38, 0x54, 0x54, 0x54, 0x18,// e
  0x08, 0x7E, 0x09, 0x01, 0x02,// f
  0x08, 0x14, 0x54, 0x54, 0x3C,// g
  0x7F, 0x08, 0x04, 0x04, 0x78,// h
  0x00, 0x44, 0x7D, 0x40, 0x00,// i
  0x20, 0x40, 0x44, 0x3D, 0x00,// j
  0x00, 0x7F, 0x10, 0x28, 0x44,// k
  0x00, 0x41, 0x7F, 0x40, 0x00,// l
  0x7C, 0x04, 0x18, 0x04, 0x78,// m
  0x7C, 0x08, 0x04, 0x04, 0x78,// n
  0x38, 0x44, 0x44, 0x44, 0x38,// o
  0x7C, 0x14, 0x14, 0x14, 0x08,// p
  0x08, 0x14, 0x14, 0x18, 0x7C,// q
  0x7C, 0x08, 0x04, 0x04, 0x08,// r
  0x48, 0x54, 0x54, 0x54, 0x20,// s
  0x04, 0x3F, 0x44, 0x40, 0x20,// t
  0x3C, 0x40, 0x40, 0x20, 0x7C,// u
  0x1C, 0x20, 0x40, 0x20, 0x1C,// v
  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
  0x44, 0x28, 0x10, 0x28, 0x44,// x
  0x0C, 0x50, 0x50, 0x50, 0x3C,// y
  0x44, 0x64, 0x54, 0x4C, 0x44,// z
  0x00, 0x08, 0x36, 0x41, 0x00,// {
  0x00, 0x00, 0x7F, 0x00, 0x00,// |
  0x00, 0x41, 0x36, 0x08, 0x00,// }
  0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
  0x08, 0x1C, 0x2A, 0x08, 0x08,// <-
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x21, 0x54, 0x54, 0x78, 0x41,
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0xF0, 0x29, 0x24, 0x29, 0xF0,
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x32, 0x48, 0x48, 0x48, 0x32,
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x39, 0x44, 0x44, 0x44, 0x39,
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0xAA, 0x00, 0x55, 0x00, 0xAA,
  0xAA, 0x55, 0xAA, 0x55, 0xAA,
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0x7C, 0x2A, 0x2A, 0x3E, 0x14,
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00
};
*/
